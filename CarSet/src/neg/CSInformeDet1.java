/*
 * CSInformeDet1.java
 *
 * Created on 10-dic-2009, 8:48:09
 */

package neg;

import data.BeanFactura;
import data.Cliente;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author depr102
 */
public class CSInformeDet1 extends javax.swing.JPanel
{
    /** Creates new form CSInformeDet1 */
    public CSInformeDet1() throws SQLException
    {
        initComponents();
        CSDesktop.menuInformeDetallado1.setEnabled(false);
        KeyListener l = new KeyListener()
        {
            public void keyTyped(KeyEvent e) {}
            public void keyPressed(KeyEvent e)
            {
               if (e.getKeyCode() == KeyEvent.VK_ENTER)
               {
                    jButtonGenerar.doClick();
                }
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE)
                {
                    jButtonCancelar.doClick();
                }
            }
            public void keyReleased(KeyEvent e) {}
        };
        jTextCliente.addKeyListener(l);
        addKeyListener(l);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jToggleButtonCliente = new javax.swing.JToggleButton();
        lCliente = new javax.swing.JLabel();
        jTextCliente = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jMonthChooser = new com.toedter.calendar.JMonthChooser();
        lCliente1 = new javax.swing.JLabel();
        jYearChooser = new com.toedter.calendar.JYearChooser();
        jButtonGenerar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setForeground(new java.awt.Color(170, 16, 4));
        jLabel1.setText("INFORME DETALLADO 1");
        jLabel1.setName("jLabel1"); // NOI18N

        jSeparator7.setForeground(new java.awt.Color(170, 16, 4));
        jSeparator7.setName("jSeparator7"); // NOI18N

        jToggleButtonCliente.setText("Buscar Cliente");
        jToggleButtonCliente.setName("jToggleButtonCliente"); // NOI18N
        jToggleButtonCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonClienteActionPerformed(evt);
            }
        });

        lCliente.setForeground(new java.awt.Color(0, 0, 100));
        lCliente.setText("Cliente");
        lCliente.setName("lCliente"); // NOI18N

        jTextCliente.setEditable(false);
        jTextCliente.setName("jTextCliente"); // NOI18N

        jSeparator6.setForeground(new java.awt.Color(170, 16, 4));
        jSeparator6.setName("jSeparator6"); // NOI18N

        jMonthChooser.setName("jMonthChooser"); // NOI18N

        lCliente1.setForeground(new java.awt.Color(0, 0, 100));
        lCliente1.setText("Mes");
        lCliente1.setName("lCliente1"); // NOI18N

        jYearChooser.setName("jYearChooser"); // NOI18N

        jButtonGenerar.setText("Generar");
        jButtonGenerar.setName("jButtonGenerar"); // NOI18N
        jButtonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarActionPerformed(evt);
            }
        });

        jButtonCancelar.setForeground(new java.awt.Color(255, 0, 0));
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.setName("jButtonCancelar"); // NOI18N
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addComponent(jButtonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelar)
                .addContainerGap(257, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator6, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lCliente1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jMonthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(159, 159, 159))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButtonCliente)
                    .addComponent(jTextCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lCliente))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lCliente1)
                    .addComponent(jMonthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGenerar)
                    .addComponent(jButtonCancelar))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonClienteActionPerformed

        System.out.println("\nBotón Buscar Cliente en Añadir Pedido.");
        CSDesktop.BuscaCliente = new JInternalFrame("Seleccionar Cliente", true, false, false, true );
        // adjuntar panel al panel de contenido del marco interno
        CSSelectCliente panel = new CSSelectCliente(jTextCliente);
        CSDesktop.BuscaCliente.getContentPane().add( panel,BorderLayout.CENTER);
        // establecer tama�o de marco interno en el tama�o de su contenido
        CSDesktop.BuscaCliente.pack();
        // adjuntar marco interno al escritorio y mostrarlo
        CSDesktop.elEscritorio.add( CSDesktop.BuscaCliente );
        CSDesktop.BuscaCliente.setLocation(150, 50);
        CSDesktop.BuscaCliente.setVisible( true );
}//GEN-LAST:event_jToggleButtonClienteActionPerformed

    private void jButtonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarActionPerformed

        //Se comprueba que haya seleccionado un cliente
        String cliente = new String(jTextCliente.getText());

        /*if (!Utilidades.campoObligatorio(cliente, "Cliente").equals("OK"))
        {
                ValidarFormatos(Utilidades.campoObligatorio(cliente, "Cliente"));
        }
        else
        {*/
            int clienteID = 0;
            String fechaIni="";
            String fechaFin="";
            String queryAux="";
            ArrayList lista=new ArrayList();

            int mes=jMonthChooser.getMonth()+ 1 ;
            int anyo=jYearChooser.getYear();

             if (!cliente.equals(""))
             {
                Cliente oCliente = new Cliente();
                clienteID = oCliente.getClienteID(cliente);
                queryAux=" AND pc.cl_id = "+clienteID+" ";
             }
            
            int mesIni=0;
            int anyoIni=0;
            if(mes==1)
            {
                mesIni=12;
                anyoIni=anyo-1;
            }
            else
            {
                mesIni=mes-1;
                anyoIni=anyo;
            }
            
            fechaIni=anyoIni+"-"+mesIni+"-26";
            fechaFin=anyo+"-"+mes+"-25";
            System.out.println(fechaIni);
            System.out.println(fechaFin);

            String query="SELECT DISTINCT pe.pe_num, pe.pe_fecha, pe.pe_provincia_origen, pe.pe_provincia_destino, pe.pe_servicio,"+
                " pe.pe_servicio_origen, pe.pe_servicio_destino, pe.pe_servicio_especial, pe.pe_dias_campa,"+
                " pe.pe_ida_vuelta, pe.fc_id, pe.pe_soporte,pe.pe_ve_matricula, pe.pe_ta_es_cliente, pe.pe_suplemento,"+
                " tc.tc_tarifa, sc.sc_ida_vuelta"+
                " FROM pe_pedidos pe, pc_pedidos_clientes pc, tc_tarifas_clientes tc,"+
                " sc_servicios_clientes sc"+
                " WHERE pc.pe_num = pe.pe_num"+
                " AND sc.cl_id = pc.cl_id"+
                " AND tc.tc_fecha_hasta > pe.pe_fecha"+
                " AND tc.tc_servicio = pe.pe_servicio"+
                " AND tc.cl_id = pc.cl_id"+
                " AND (tc.tc_servicio_origen = pe.pe_servicio_origen OR tc.tc_servicio_origen = pe.pe_servicio_destino)"+
                " AND (tc.tc_servicio_destino = pe.pe_servicio_destino OR tc.tc_servicio_destino = pe.pe_servicio_origen)"+
                " AND tc.tc_soporte = pe.pe_soporte"+
                " AND pe_fecha BETWEEN '"+fechaIni+"' AND '"+fechaFin+"'";
            /*String query="SELECT DISTINCT pe.pe_num, pe.pe_fecha, pe.pe_provincia_origen," +
                         " pe.pe_provincia_destino,pe.pe_servicio, pe.pe_servicio_origen, " +
                         " pe.pe_servicio_destino, pe.pe_servicio_especial, pe.pe_dias_campa, " +
                         " pe.pe_ida_vuelta, pe.fc_id, pe.pe_soporte, pe.pe_ve_matricula,pe.pe_ta_es_cliente," +
                         " pe.pe_suplemento, tc.tc_tarifa, fc.fc_nombre, sc.sc_ida_vuelta" +
                         " FROM pe_pedidos pe, pc_pedidos_clientes pc, tc_tarifas_clientes tc,  sc_servicios_clientes sc, fc_factores_correccion fc" +
                         " WHERE pc.pe_num = pe.pe_num" +
                         " AND sc.cl_id = pc.cl_id" +
                         " AND tc.tc_fecha_hasta > pe.pe_fecha" +
                         " AND tc.tc_servicio = pe.pe_servicio" +
                         " AND tc.cl_id = pc.cl_id" +
                         " AND (tc.tc_servicio_origen = pe.pe_servicio_origen OR tc.tc_servicio_origen = pe.pe_servicio_destino)" +
                         " AND (tc.tc_servicio_destino = pe.pe_servicio_destino OR tc.tc_servicio_destino = pe.pe_servicio_origen)" +
                         " AND tc.tc_soporte = pe.pe_soporte" +
                         " AND pe_fecha BETWEEN '"+fechaIni+"' AND '"+fechaFin+"'";*/
            if (!cliente.equals(""))
            {
                query=query + " AND pc.cl_id = "+clienteID+" ";
            }
             query=query +" GROUP BY pe.pe_num ORDER BY pe.pe_num ASC";

            System.out.println(query);
            ResultSet rs = CSDesktop.datos.select(query);
            try {
                while (rs.next()) {
                    BeanFactura nueva = new BeanFactura();

                    nueva.setNumPedido(rs.getLong("pe_num"));
                    nueva.setFecha(rs.getString("pe_fecha"));
                    nueva.setProvinciaOrigen(rs.getString("pe_servicio_origen"));
                    nueva.setProvinciaDestino(rs.getString("pe_servicio_destino"));
                    nueva.setServicio(rs.getString("pe_servicio"));
                    nueva.setServicioOrigen(rs.getString("pe_servicio_origen"));
                    nueva.setServicioDestino(rs.getString("pe_servicio_destino"));
                    nueva.setServicioEspecial(rs.getString("pe_servicio_especial"));
                    nueva.setDiasCampa(rs.getString("pe_dias_campa"));
                    nueva.setFactor(rs.getString("fc_id"));
                    nueva.setSoporte(rs.getString("pe_soporte"));
                    nueva.setMatricula(rs.getString("pe_ve_matricula"));
                    //nueva.setMarca(rs.getString("pe_ve_marca"));
                    //nueva.setVehiculo(rs.getString("fc_nombre"));
                    nueva.setTarifaEsCliente(rs.getString("pe_ta_es_cliente"));
                    //nueva.setTarifaEsProveedor(rs.getString("pe_ta_es_proveedor"));
                    nueva.setSuplemento(rs.getString("pe_suplemento"));
                    //nueva.setDescripcion(rs.getString("pe_descripcion"));
                    nueva.setTarifa(rs.getString("tc_tarifa"));
                    nueva.setIdaVuelta(rs.getString("pe_ida_vuelta"));

                    lista.add(nueva);
                    }
            } catch (SQLException ex) {
                Logger.getLogger(CSInformeDet1.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                CSLanzarInforme1.lanzar(lista, clienteID, cliente, mes, anyo);              
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CSInformeDet1.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(CSInformeDet1.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JRException ex) {
                Logger.getLogger(CSInformeDet1.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(CSInformeDet1.class.getName()).log(Level.SEVERE, null, ex);
            }
                        //CSLanzarFactura.lanzar(query,fechaFac,beanCliente,2);
                        //CSResultBuscarPedido resultBuscarCliente = new CSResultBuscarPedido(query);

 
       // }
    }//GEN-LAST:event_jButtonGenerarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        CSDesktop.InformeDetallado1.dispose();
        CSDesktop.menuInformeDetallado1.setEnabled(true);
    }//GEN-LAST:event_jButtonCancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonGenerar;
    private javax.swing.JLabel jLabel1;
    private com.toedter.calendar.JMonthChooser jMonthChooser;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    public javax.swing.JTextField jTextCliente;
    private javax.swing.JToggleButton jToggleButtonCliente;
    private com.toedter.calendar.JYearChooser jYearChooser;
    private javax.swing.JLabel lCliente;
    private javax.swing.JLabel lCliente1;
    // End of variables declaration//GEN-END:variables

     public void ValidarFormatos(String accion)
    {
         jButtonGenerar.setEnabled(false);
         JLabel errorFields = new JLabel(accion);
         JOptionPane.showMessageDialog(null,errorFields);
         jButtonGenerar.setEnabled(true);
    }

}
