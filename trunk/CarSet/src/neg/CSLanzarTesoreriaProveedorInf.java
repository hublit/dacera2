package neg;

import data.BeanAuxInformeTesoreria;
import data.Cliente;
import data.Proveedor;
import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import utils.Utilidades;

/**
 *
 * @author raulin
 */
public class CSLanzarTesoreriaProveedorInf extends javax.swing.JPanel
{
    private int clienteID;
    private int proveedorID;

    public CSLanzarTesoreriaProveedorInf() throws SQLException
    {
        CSDesktop.menuBuscarProveedor.setEnabled(false);
        initComponents();

        KeyListener l = new KeyListener()
        {
            public void keyTyped(KeyEvent e) {}
            public void keyPressed(KeyEvent e)
            {
               if (e.getKeyCode() == KeyEvent.VK_ENTER)
               {
                    jButtonBuscar.doClick();
                }
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE)
                {
                    jButtonCancelar.doClick();
                }
            }
            public void keyReleased(KeyEvent e) {}
        };

        for (int k = 0; k < this.getComponents().length; k ++)
        {
                this.getComponents()[k].addKeyListener(l);
        }
        addKeyListener(l);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jButtonBuscar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        lFechaFin1 = new javax.swing.JLabel();
        jDateFechaFin = new com.toedter.calendar.JDateChooser();
        lFechaIni1 = new javax.swing.JLabel();
        jDateFechaIni = new com.toedter.calendar.JDateChooser();
        jTextProveedor = new javax.swing.JTextField();
        jToggleButtonProveedor = new javax.swing.JToggleButton();
        lCliente = new javax.swing.JLabel();
        jToggleButtonCliente = new javax.swing.JToggleButton();
        lCliente1 = new javax.swing.JLabel();
        jTextCliente = new javax.swing.JTextField();

        jLabel2.setText("jLabel2");
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText("jLabel3");
        jLabel3.setName("jLabel3"); // NOI18N

        setMaximumSize(new java.awt.Dimension(0, 0));

        jSeparator4.setForeground(new java.awt.Color(170, 16, 4));
        jSeparator4.setName("jSeparator3"); // NOI18N

        jButtonBuscar.setText("Generar Informe");
        jButtonBuscar.setName("jButtonBuscar"); // NOI18N
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonCancelar.setForeground(new java.awt.Color(204, 0, 0));
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.setName("jButtonCancelar"); // NOI18N
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(170, 16, 4));
        jLabel1.setText(" Tesorer√≠a Proveedor");
        jLabel1.setName("jLabel1"); // NOI18N

        jSeparator7.setForeground(new java.awt.Color(170, 16, 4));
        jSeparator7.setName("jSeparator7"); // NOI18N

        lFechaFin1.setForeground(new java.awt.Color(0, 0, 100));
        lFechaFin1.setText("Fecha Hasta");
        lFechaFin1.setName("lFechaFin1"); // NOI18N

        jDateFechaFin.setDateFormatString("dd-MM-yyyy"); // NOI18N
        jDateFechaFin.setName("jDateFechaFin"); // NOI18N

        lFechaIni1.setForeground(new java.awt.Color(0, 0, 100));
        lFechaIni1.setText("Fecha Desde");
        lFechaIni1.setName("lFechaIni1"); // NOI18N

        jDateFechaIni.setDateFormatString("dd-MM-yyyy"); // NOI18N
        jDateFechaIni.setName("jDateFechaIni"); // NOI18N

        jTextProveedor.setEditable(false);
        jTextProveedor.setName("jTextProveedor");

        jToggleButtonProveedor.setText("Buscar Proveedor");
        jToggleButtonProveedor.setName("jToggleButtonProveedor");
        jToggleButtonProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonProveedorActionPerformed(evt);
            }
        });

        lCliente.setForeground(new java.awt.Color(0, 0, 100));
        lCliente.setText("Proveedor");
        lCliente.setName("lCliente");

        jToggleButtonCliente.setText("Buscar Cliente");
        jToggleButtonCliente.setName("jToggleButtonCliente");
        jToggleButtonCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonClienteActionPerformed(evt);
            }
        });

        lCliente1.setForeground(new java.awt.Color(0, 0, 100));
        lCliente1.setText("Cliente");
        lCliente1.setName("lCliente1");

        jTextCliente.setEditable(false);
        jTextCliente.setName("jTextCliente");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lFechaIni1)
                                    .addComponent(lCliente)
                                    .addComponent(lCliente1))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jDateFechaIni, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(95, 95, 95)
                                        .addComponent(lFechaFin1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jDateFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextProveedor)
                                                .addGap(50, 50, 50))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jToggleButtonProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jToggleButtonCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(203, 203, 203)
                        .addComponent(jButtonCancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(16, 16, 16)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lFechaIni1)
                    .addComponent(jDateFechaIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lFechaFin1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButtonProveedor)
                    .addComponent(lCliente))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButtonCliente)
                    .addComponent(lCliente1)
                    .addComponent(jTextCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBuscar)
                    .addComponent(jButtonCancelar))
                .addGap(42, 42, 42))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
       CSDesktop.BuscarTesoreriaProveedorInf.dispose();
       CSDesktop.menuTesoreriaCliente.setEnabled(true);
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        int numFl = 0;
        String fechaI="";
        String fechaF="";
        String fechaIFc="";
        String fechaFFc="";
        System.out.println("Inicio");
        
        
        String cliente = new String(jTextCliente.getText());
        Cliente cl = new Cliente();
        clienteID = cl.getClienteID(cliente);
        
        String proveedor = new String(jTextProveedor.getText());
        Proveedor pr = new Proveedor();
        proveedorID = pr.getProveedorID(proveedor);

        Calendar fechaCalendar = jDateFechaIni.getCalendar();
        if (fechaCalendar!=null)
        {
            Date fecha = fechaCalendar.getTime();
            SimpleDateFormat formatoDeFecha = new SimpleDateFormat("yyyy-MM-dd");
            fechaI=formatoDeFecha.format(fecha);
        }

        Calendar fechaCalendarFin = jDateFechaFin.getCalendar();
        if (fechaCalendarFin!=null)
        {
            Date fecha = fechaCalendarFin.getTime();
            SimpleDateFormat formatoDeFecha = new SimpleDateFormat("yyyy-MM-dd");
            fechaF=formatoDeFecha.format(fecha);
        }
        
        /*String query = "SELECT distinct(fl.fl_id), fl.fl_fecha, fl.fl_num, cl.cl_nombre, " +
                       "fl.fl_importe, fl.fl_iva, fl.fl_importe_total, cl.cl_plazo, fp.fp_tipo, " +
                       "fl.fl_estado, fl.fl_fecha_pago, cl.cl_num_cuenta, fl.fl_observaciones, cl.cl_dias_plazo " +
                       "FROM fl_factura_cliente fl, pe_pedidos pe, cl_clientes cl, fp_forma_pago fp " +
                       "WHERE  fl.cl_id = cl.cl_id AND cl.fp_id = fp.fp_id AND fl.fl_num = pe.pe_num_fa_cl";*/
        
        String query="SELECT pr.pr_nombre_fiscal, pr.pr_id , count(*),pe.pe_estado,sum(pe.pe_ta_es_proveedor), pe.pe_fecha " +
                     "FROM pr_proveedores pr, pp_pedidos_proveedores pp , pe_pedidos pe " +
                     "WHERE pr.pr_id=pp.pr_id AND pp.pe_num = pe.pe_num AND (pe.pe_estado='Facturado' OR pe.pe_estado='Facturado y Validado') ";
                    

        System.out.println("Entrando");
        
        //Si no se introducen las fechas
        if  (fechaI.equals("") && fechaF.equals(""))
        {
            System.out.println("Entra");
            jButtonBuscar.setEnabled(false);
            JLabel errorFields = new JLabel("<HTML><FONT COLOR = Blue>Debe seleccionar per√≠odo de tiempo</FONT></HTML>");
            JOptionPane.showMessageDialog(null,errorFields);
            jButtonBuscar.setEnabled(true);
        }
        else
        {
            query = query + " AND pe.pe_fecha>='"+fechaI+"' AND pe.pe_fecha<='"+fechaF+"' ";
           
            if (!proveedor.equals("")) {
                query = query + " AND pr.pr_id = " + proveedorID;
            }
            

            query = query +  "group by pr.pr_id,pe.pe_estado,pe.pe_fecha>= DATE_SUB(CURDATE(), INTERVAL 5 MONTH)" ;
            
             SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
             Calendar cal = Calendar.getInstance();
             cal.add(Calendar.MONTH, -5);    //Adding 1 month to current date
             String newdate = dateformat.format(cal.getTime());
             
            SimpleDateFormat formatoDelTexto = new SimpleDateFormat("dd/MM/yyyy");
            //String strFecha = "2007-12-25";
            Date fecha = null;
            try {

                fecha = formatoDelTexto.parse(newdate);

            } catch (ParseException ex) {
                ex.printStackTrace();
            }
            
            System.out.println(query);
            ResultSet rs = CSDesktop.datos.select(query);
            int pr_id_ant=0;
            List listaResultados = new ArrayList();
            HashMap <Integer, BeanAuxInformeTesoreria> listaResul = new HashMap<Integer, BeanAuxInformeTesoreria>();
            try {
                    double sumaTotalPedidos=0;
                    double sumaPedidosValidados=0;   
                    double sumaPedidosNoFacturados=0;
                    double sumaPedidosPendientes=0;
                    int flag=0;
                    String nombreFiscal="";
                    String nombreFiscalAnt="";
               
                while (rs.next())
                {                    
                    int pr_id=rs.getInt("pr_id");
                    nombreFiscal = rs.getString("pr.pr_nombre_fiscal");
                    flag=1;
                  
                    if ((pr_id == pr_id_ant) || (pr_id_ant == 0))                        
                    {
                        pr_id_ant = pr_id;
                        nombreFiscalAnt = nombreFiscal;
                       
                                                                                            
                        if(rs.getString("pe_estado").equals("Facturado y Validado"))
                        {
                            sumaPedidosValidados += rs.getDouble("sum(pe.pe_ta_es_proveedor)");                                                     
                        }
                        if(rs.getString("pe_estado").equals("Facturado"))
                        {
                            Date fechaPedido = rs.getDate("pe.pe_fecha");
                            //String fechaPedido=Utilidades.generarStringFecha(fecha);
                            //String resultadoComparar=Utilidades.comparaFechaString(fechaPedido, newdate);
                            if((fechaPedido.compareTo(fecha)<0))                         
                            {
                                sumaPedidosNoFacturados = rs.getDouble("sum(pe.pe_ta_es_proveedor)");
                                sumaTotalPedidos += sumaPedidosNoFacturados;
                            }
                            else
                            {
                                sumaPedidosPendientes = rs.getDouble("sum(pe.pe_ta_es_proveedor)");
                                sumaTotalPedidos += sumaPedidosPendientes;
                            }                                                                                   
                        }
                            
                    }
                    else
                    {
                        sumaTotalPedidos += sumaPedidosValidados;
                        BeanAuxInformeTesoreria dato = new BeanAuxInformeTesoreria();    
                        dato.setPedidosValidados(sumaPedidosValidados);
                        dato.setPedidosPendientes(sumaPedidosPendientes);
                        dato.setPedidosNoFacturados(sumaPedidosNoFacturados);
                        dato.setPedidosTotales(sumaTotalPedidos);
                        dato.setNombreProveedor(nombreFiscalAnt);
                        
                        listaResultados.add(pr_id_ant);
                        listaResul.put(pr_id_ant, dato);
                        
                        
                        sumaTotalPedidos=0;
                        sumaPedidosValidados=0;   
                        sumaPedidosNoFacturados=0;
                        sumaPedidosPendientes=0;
                        
                         pr_id_ant = pr_id;
                         nombreFiscalAnt = nombreFiscal;
                                                                                              
                        if(rs.getString("pe_estado").equals("Facturado y Validado"))
                        {
                            sumaPedidosValidados += rs.getDouble("sum(pe.pe_ta_es_proveedor)");                                                     
                        }
                        if(rs.getString("pe_estado").equals("Facturado"))
                        {
                            Date fechaPedido = rs.getDate("pe.pe_fecha");
                            //String fechaPedido=Utilidades.generarStringFecha(fecha);
                            //String resultadoComparar=Utilidades.comparaFechaString(fechaPedido, newdate);
                            if((fechaPedido.compareTo(fecha)<0))                         
                            {
                                sumaPedidosNoFacturados = rs.getDouble("sum(pe.pe_ta_es_proveedor)");
                                sumaTotalPedidos += sumaPedidosNoFacturados;
                            }
                            else
                            {
                                sumaPedidosPendientes = rs.getDouble("sum(pe.pe_ta_es_proveedor)");
                                sumaTotalPedidos += sumaPedidosPendientes;
                            }                                                                                   
                        }
                    }
                }
                
                if(flag==1)
                {
                        sumaTotalPedidos += sumaPedidosValidados;
                        BeanAuxInformeTesoreria dato = new BeanAuxInformeTesoreria();    
                        dato.setPedidosValidados(sumaPedidosValidados);
                        dato.setPedidosPendientes(sumaPedidosPendientes);
                        dato.setPedidosNoFacturados(sumaPedidosNoFacturados);
                        dato.setPedidosTotales(sumaTotalPedidos);
                        dato.setNombreProveedor(nombreFiscal);
                        
                        listaResultados.add(pr_id_ant);
                        listaResul.put(pr_id_ant, dato);
                }
                
                for(int j=0;j<listaResultados.size();j++)
                {
                    int pr_id=new Integer(listaResultados.get(j).toString());
                    
                     String query2="SELECT pr_num,SUM(tr_importe),tr_estado, tr_fecha" + 
                     " FROM tr_tesoreria_proveedor" + 
                     " WHERE pr_num = " + pr_id;
                     query2 = query2 + " GROUP BY tr_estado, pr_num " ;
                   
              
                     
                      if  (fechaI.equals("") && fechaF.equals(""))
                      {
       
                        query2 = query2 + " AND tr_fecha>='"+fechaI+"' AND tr_fecha<='"+fechaF+"' ";
                
                      }
                      
                      query2 = query2 +   " ORDER BY pr_num ";
               
                ResultSet rs2 = CSDesktop.datos.select(query2);
                pr_id_ant=0;
                
                double sumaImportesFacturas=0;
                double sumaFacturasPagadas=0;
                boolean flag2=false;
                
                while(rs2.next())
                {                                                                                    
                        if(rs2.getString("tr_estado").equals("PTE")) 
                        {
                            sumaImportesFacturas += rs2.getDouble("sum(tr_importe)");
                        }
                        if(rs2.getString("tr_estado").equals("PAGADO")) 
                        {
                            sumaFacturasPagadas += rs2.getDouble("sum(tr_importe)");
                        }                                                                   
                }
              
              
                         BeanAuxInformeTesoreria datoAux=listaResul.get(pr_id);
                         datoAux.setImporteFacturasPagadas(sumaFacturasPagadas);
                         datoAux.setImporteFacturasPendientes(sumaFacturasPagadas);
                         datoAux.setImporteFacturas(sumaImportesFacturas);
                         
                         listaResul.put(pr_id,datoAux); 
                }
                
                
            } catch (SQLException ex) {
                Logger.getLogger(CSLanzarTesoreriaProveedorInf.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            try {
                CSResultBuscarTesoreriaProveedorInf resultBuscarTesoreriaPrInf = new CSResultBuscarTesoreriaProveedorInf(listaResul,(ArrayList)listaResultados);
            } catch (UnknownHostException ex) {
                Logger.getLogger(CSLanzarInformeTesoreriaCliente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(CSLanzarInformeTesoreriaCliente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(CSLanzarInformeTesoreriaCliente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(CSLanzarInformeTesoreriaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jToggleButtonProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonProveedorActionPerformed

        System.out.println("\nBot√≥n Buscar Proveedor en Validar Pedido.");
        CSDesktop.BuscaProveedor = new JInternalFrame("Seleccionar Proveedor", true, false, false, true);
        // adjuntar panel al panel de contenido del marco interno
        CSSelectProveedor panel = new CSSelectProveedor(jTextProveedor, "", true);
        CSDesktop.BuscaProveedor.getContentPane().add(panel, BorderLayout.CENTER);
        // establecer tamaÔøΩo de marco interno en el tamaÔøΩo de su contenido
        CSDesktop.BuscaProveedor.pack();
        // adjuntar marco interno al escritorio y mostrarlo
        CSDesktop.elEscritorio.add(CSDesktop.BuscaProveedor);
        CSDesktop.BuscaProveedor.setLocation(150, 50);
        CSDesktop.BuscaProveedor.setVisible(true);
    }//GEN-LAST:event_jToggleButtonProveedorActionPerformed

    private void jToggleButtonClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonClienteActionPerformed

        System.out.println("\nBot√≥n Buscar Cliente.");
        CSDesktop.BuscaCliente = new JInternalFrame("Seleccionar Cliente", true, false, false, true);
        // adjuntar panel al panel de contenido del marco interno
        CSSelectCliente panel = new CSSelectCliente(jTextCliente, "", true);
        CSDesktop.BuscaCliente.getContentPane().add(panel, BorderLayout.CENTER);
        // establecer tamaÔøΩo de marco interno en el tamaÔøΩo de su contenido
        CSDesktop.BuscaCliente.pack();
        // adjuntar marco interno al escritorio y mostrarlo
        CSDesktop.elEscritorio.add(CSDesktop.BuscaCliente);
        CSDesktop.BuscaCliente.setLocation(150, 50);
        CSDesktop.BuscaCliente.setVisible(true);
    }//GEN-LAST:event_jToggleButtonClienteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancelar;
    private com.toedter.calendar.JDateChooser jDateFechaFin;
    private com.toedter.calendar.JDateChooser jDateFechaIni;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator7;
    public javax.swing.JTextField jTextCliente;
    public javax.swing.JTextField jTextProveedor;
    private javax.swing.JToggleButton jToggleButtonCliente;
    private javax.swing.JToggleButton jToggleButtonProveedor;
    private javax.swing.JLabel lCliente;
    private javax.swing.JLabel lCliente1;
    private javax.swing.JLabel lFechaFin1;
    private javax.swing.JLabel lFechaIni1;
    // End of variables declaration//GEN-END:variables

   

    /**
     *
     * @throws SQLException
     */
   


    public void ValidarFormatos(String accion)
    {
         jButtonBuscar.setEnabled(false);
         JLabel errorFields = new JLabel(accion);
         JOptionPane.showMessageDialog(null,errorFields);
         jButtonBuscar.setEnabled(true);
    }
}